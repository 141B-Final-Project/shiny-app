
###############SHINY###############

#######################################One##############################################
# #This option works and it the only one that allows the you to select the race option

#library(shiny)
#library(DT)
# # Define UI for data download app ----
# ui <- fluidPage(
# 
#   # App title ----
#   titlePanel("Census Data"),
# 
#   # Sidebar layout with input and output definitions ----
#   sidebarLayout(
# 
#     # Sidebar panel for inputs ----
#     sidebarPanel(
# 
#       # Select type of trend to plot
# 
# 
#       # Select date range to be plotted
#       # dateRangeInput("dateset", strong("Date range"), start = "2009-01-01", end = "2018-07-31",
#       #                min = "2009-01-01", max = "2018-07-31"),
# 
# 
#       # Input: Choose dataset ----
#       selectInput("dataset", "Choose a Race:",
#                   choices = c("Asian", "White", "Black")),
# 
#       # selectInput("dataset", "Choose a County:",
#       #             choices = c("county_name", "total_population", "total_male", "total_female",
#       #                         "total_white", "total_white_male", "total_white_female",
#       #                         "total_black", "total_black_male", "total_black_female",
#       #                         "total_asian", "total_asian_male", "total_asian_female",
#       #                         "state_number", "county_fips", "state_county_fips", "year"
#       #             )
# 
#       #selectInput('year','Select a Year',year), # This is an option for year
# 
#       # Button
#       downloadButton("downloadData", "Download")
# 
#     ),
# 
# 
#     # Main panel for displaying outputs ----
#     mainPanel(
# 
#       tableOutput("table")
# 
#     )
# 
#   )
# )
# 
# 
# # Define server logic to display and download selected file ----
# server <- function(input, output) {
# 
#   # Reactive value for selected dataset ----
#   datasetInput <- reactive({
#     switch(input$dataset,
#            "Asian" = Asian,
#            "White" = White,
#            "Black" = Black)
#   })
# 
#   # Table of selected dataset ----
#   output$table <- renderTable({
#     datasetInput()
#   })
# 
#   # Downloadable csv of selected dataset ----
#   output$downloadData <- downloadHandler(
#     filename = function() {
#       paste(input$dataset, ".csv", sep = "")
#     },
#     content = function(file) {
#       write.csv(datasetInput(), file, row.names = FALSE)
#     }
#   )
# 
# }
# 
# # Create Shiny app ----
# shinyApp(ui, server)

###########################################Number2############################################
# This is a basic table that shows all the data for a total_pop_race and does not give optiosn to choose the race just shows the data
#library(shiny)
#library(ggplot2) 
#library(DT)
# 
# ui <- basicPage(
#   h2("Census data"),
#   DT::dataTableOutput("total_pop_race")
# )
# 
# server <- function(input, output) {
#   output$total_pop_race = DT::renderDataTable({
#     total_pop_race
#   })
# }
# 

######################another version APPLICATION number 2 ###################

#This total_pop_race data set and it has 2 selections options race, and county, and the race options
#does not work at all since the options are reading through and I tried talking to the TA and he didnt know 
#why its not working and this was my orginal version!


# ui <- fluidPage(
#   titlePanel("DataTable by race and county"),
# 
#   # Create a new Row in the UI for selectInputs
#   fluidRow(
#     column(4,
#            selectInput("Race",
#                        "race:",
#                         choices = list("All","Black", "White", "Asian"))
#                         # c("All",
#                         #   unique(as.character(total_pop$Race))))
#     ),
#     column(4,
#            selectInput("County",
#                        "county:",
#                        c("All",
#                          unique(as.character(total_pop_race$County))))
#     ),
#     # column(4,
#     #        selectInput("cyl",
#     #                    "Cylinders:",
#     #                    c("All",
#     #                      unique(as.character(mpg$cyl))))
#     # )
#     # Button
#     downloadButton("downloadData", "Download")
#   ),
#   # Create a new row for the table.
#   DT::dataTableOutput("table")
# )
# 
# # Load the ggplot2 package which provides
# # the 'mpg' dataset.
# library(ggplot2)
# 
# server <- function(input, output) {
# 
#   # Filter data based on selections
#   output$table <- DT::renderDataTable(DT::datatable({
#     data <- total_pop_race
#     if (input$Race == "Asian") {
#       data <- data[,5]   #this is supposed to read the 5th column which is total_asian
#      # st <- data[,5]
#     }
#     # if (input$County != "All") {
#     #   data <- data[data$county == input$County,]
#     # }
#     # if (input$trans != "All") {
#     #   data <- data[data$trans == input$trans,]
#     # }
#     data
#   }))
# 
# }
# shinyApp(ui, server)
# 





####################################
############################ CODE FOR SUNBURST PLOT AND READING DATA FROM API ######################
library(tidyverse)
library(plotly)
library(jsonlite)
library(httr)

# for loop to read data for each year from 2009-2018
all_years <- NULL
years <- c("2009", "2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018")
for (i in seq_len(10)) {
    url <- paste0("https://api.census.gov/data/", years[i], "/acs/acs5/")
    all_years <- bind_rows(
        all_years,
        
        GET(url,
            query = list(
                get = "NAME,B01001_001E,B01001_002E,B01001_026E,B01001A_001E,B01001A_002E,B01001A_017E,B01001B_001E,B01001B_002E,B01001B_017E,B01001D_001E,B01001D_002E,B01001D_017E",
                `for` = "state:*"
            )) %>%
            content(as = "text") %>%
            fromJSON(simplifyMatrix = TRUE) %>%
            as.data.frame() %>%
            slice(-1)
        
    )
}
all_years
dim(all_years)

names(all_years) <- c("state", "total", "total_male", "total_female", 
                      "total_white", "total_white_male", "total_white_female", 
                      "total_black", "total_black_male", "total_black_female",
                      "total_asian", "total_asian_male", "total_asian_female", "state_number")

# add year column to "all_years" data frame
year <- c(rep(2009,52),rep(2010,52),rep(2011,52),rep(2012,52),rep(2013,52),rep(2014,52),
          rep(2015,52),rep(2016,52),rep(2017,52),rep(2018,52))
all_years <- all_years %>% mutate(year = year)


total_pop_gender <- all_years %>% select(state, total, total_male, total_female, year)
total_pop_race <- all_years %>% select(state, total,total_white, total_black, total_asian, year)
total_pop_by_race_and_gender <- all_years %>% select(-"state_number")
total_pop <- all_years %>% select(state, total, year) %>% mutate(total=as.numeric(as.character(total)))

Black <- total_pop_race %>% select(state, total,total_black, year)
Asian <- total_pop_race %>% select(state, total,total_asian, year)
White <- total_pop_race %>% select(state, total,total_white, year)



# add information about region to data frame
west <- c("Alaska","Arizona","California","Colorado","Hawaii","Idaho","Montana","Nevada","New Mexico",
          "Oregon","Utah","Washington","Wyoming") %>% sort() %>% as.factor()
midwest <- c("Illinois","Indiana","Iowa","Kansas","Michigan","Missouri","Minnesota","Nebraska",
             "North Dakota","Ohio","South Dakota","Wisconsin") %>% sort() %>% as.factor()
south <- c("Alabama","Arkansas","Delaware","Florida","Georgia","Kentucky","Louisiana","Maryland",
           "Mississippi","Oklahoma","North Carolina","South Carolina","Tennessee","Texas","Virginia",
           "West Virginia", "Puerto Rico") %>% sort() %>% as.factor()
northeast <- c("Connecticut","Maine","New Hampshire","Massachusetts","New Jersey","New York",
               "Pennsylvania","Rhode Island","Vermont","District of Columbia") %>% sort()
all_states <- all_years %>% pull(state) %>% unique() %>%  sort() %>% as.factor()

west_df <- data.frame(state=west) %>% mutate(region = "West")
midwest_df <- data.frame(state=midwest) %>% mutate(region = "Midwest")
south_df <- data.frame(state=south) %>% mutate(region = "South")
northeast_df <- data.frame(state=northeast) %>% mutate(region="Northeast") 
regions_df <- rbind(west_df, midwest_df, south_df, northeast_df) %>% mutate(region = as.factor(region))

# add region to total_pop dataframe
total_pop_by_region <- inner_join(total_pop, regions_df, by="state")
total_pop_by_region$state <- as.factor(total_pop_by_region$state)

# create sunburst plot for years 2009 - 2018
names(total_pop_by_region)[2] <- "pop"
