

############################## CODE FOR READING COUNTY DATA #######################################
library(tidyverse)
library(plotly)
library(jsonlite)
library(httr)

# for loop to read data for all counties each year from 2009-2018
all_years_county <- NULL
years <- c("2009", "2010", "2011", "2012", "2013", "2014","2015", "2016", "2017", "2018")
for (i in seq_len(10)) {
  url <- paste0("https://api.census.gov/data/", years[i], "/acs/acs5/")
  all_years_county <- bind_rows(
    all_years_county,
    
    GET(url,
        query = list(
          get = "NAME,B01001_001E,B01001_002E,B01001_026E,B01001A_001E,B01001A_002E,B01001A_017E,B01001B_001E,B01001B_002E,B01001B_017E,B01001D_001E,B01001D_002E,B01001D_017E",
          `for` = "county:*"
        )) %>%
      content(as = "text") %>%
      fromJSON(simplifyMatrix = TRUE) %>%
      as.data.frame() %>%
      slice(-1)
    
  )
}

all_years_county <- all_years_county %>% 
  mutate(state_county_fips = paste0(V14, V15))
year <- c(rep(2009,3221),rep(2010,3221),rep(2011,3221),rep(2012,3221),rep(2013,3221),rep(2014,3220),
          rep(2015,3220),rep(2016,3220),rep(2017,3220),rep(2018,3220))
all_years_county <- all_years_county %>% mutate(year = year)

names(all_years_county) <- c("county_name", "total_population", "total_male", "total_female", 
                             "total_white", "total_white_male", "total_white_female", 
                             "total_black", "total_black_male", "total_black_female",
                             "total_asian", "total_asian_male", "total_asian_female", 
                             "state_number", "county_fips", "state_county_fips", "year"
)

all_years_county <- all_years_county %>%
  mutate(
    pct_total_white = as.numeric(all_years_county$total_white)/as.numeric(all_years_county$total_population),
    pct_total_black = as.numeric(all_years_county$total_black)/as.numeric(all_years_county$total_population),
    pct_total_asian = as.numeric(all_years_county$total_asian)/as.numeric(all_years_county$total_population)
  )



###################################  SHINY APP CODE #####################################
library(shiny)
library(plotly)


ui <- fluidPage(
  headerPanel("Population Estimates"),
  sidebarPanel(
    selectInput("val", "Select a variable", 
                choices = list("Total Population"="total_population","Percent White"="pct_total_white", "Percent Black"="pct_total_black", "Percent Asian"="pct_total_asian")
    ),
    selectInput("state", "View a State", choices = list("None","Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming")),
    selectInput('year','Select a Year', years)
  ),
  mainPanel(
    
      plotOutput("county_map"),
      tableOutput("table")
    
    
  )
)


server <- function(input, output) {
  
  ######### US County Map
  library(data.table)
  library(choroplethr)
  # requires data frame with cols named value, region
  
  
  output$county_map <- renderPlot({
    value <- as.numeric(all_years_county[, input$val])
    region <- as.numeric(all_years_county$state_county_fips)
    years <- all_years_county$year
    map_data <- as.data.frame(cbind(value,region,years))
    
    if(input$state !="None"){
      
      county_choropleth(subset(map_data, map_data$years == input$year), state_zoom=tolower(input$state))
    }
    
  })
  
  # Data table 
  output$table <- renderTable({
    value_dt <- as.numeric(subset(all_years_county, all_years_county$county_name %like% input$state & all_years_county$year == input$year)[,input$val])
    name_dt <- subset(all_years_county, all_years_county$county_name %like% input$state & all_years_county$year == input$year)$county_name
    
    if(input$state !="None"){
      dt <- as.data.frame(cbind(name_dt, value_dt))
      names(dt) <- c("County, State", input$val)
      dt
    }
    
  })
}

shinyApp(ui = ui, server = server)
